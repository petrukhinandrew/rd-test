//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.12.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:41</p>
  /// </summary>
  public class PrimitiveClassModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public ISignal<SimpleStruct> SetStruct => _SetStruct;
    [NotNull] public ISignal<List<SimpleStruct>> MultipleStruct => _MultipleStruct;
    
    //private fields
    [NotNull] private readonly RdSignal<SimpleStruct> _SetStruct;
    [NotNull] private readonly RdSignal<List<SimpleStruct>> _MultipleStruct;
    
    //primary constructor
    private PrimitiveClassModel(
      [NotNull] RdSignal<SimpleStruct> setStruct,
      [NotNull] RdSignal<List<SimpleStruct>> multipleStruct
    )
    {
      if (setStruct == null) throw new ArgumentNullException("setStruct");
      if (multipleStruct == null) throw new ArgumentNullException("multipleStruct");
      
      _SetStruct = setStruct;
      _MultipleStruct = multipleStruct;
      BindableChildren.Add(new KeyValuePair<string, object>("setStruct", _SetStruct));
      BindableChildren.Add(new KeyValuePair<string, object>("multipleStruct", _MultipleStruct));
    }
    //secondary constructor
    private PrimitiveClassModel (
    ) : this (
      new RdSignal<SimpleStruct>(SimpleStruct.Read, SimpleStruct.Write),
      new RdSignal<List<SimpleStruct>>(ReadSimpleStructList, WriteSimpleStructList)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<List<SimpleStruct>> ReadSimpleStructList = SimpleStruct.Read.List();
    
    public static  CtxWriteDelegate<List<SimpleStruct>> WriteSimpleStructList = SimpleStruct.Write.List();
    
    protected override long SerializationHash => 8271082733608343902L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(DemoRoot), DemoRoot.RegisterDeclaredTypesSerializers);
    }
    
    public PrimitiveClassModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("PrimitiveClassModel"));
      this.BindTopLevel(lifetime, protocol, "PrimitiveClassModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("PrimitiveClassModel (");
      using (printer.IndentCookie()) {
        printer.Print("setStruct = "); _SetStruct.PrintEx(printer); printer.Println();
        printer.Print("multipleStruct = "); _MultipleStruct.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:42</p>
  /// </summary>
  public sealed class SimpleClass : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public string StrValue {get; private set;}
    public int IntValue {get; private set;}
    
    //private fields
    //primary constructor
    public SimpleClass(
      [NotNull] string strValue,
      int intValue
    )
    {
      if (strValue == null) throw new ArgumentNullException("strValue");
      
      StrValue = strValue;
      IntValue = intValue;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<SimpleClass> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var strValue = reader.ReadString();
      var intValue = reader.ReadInt();
      var _result = new SimpleClass(strValue, intValue).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<SimpleClass> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      writer.Write(value.StrValue);
      writer.Write(value.IntValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("SimpleClass (");
      using (printer.IndentCookie()) {
        printer.Print("strValue = "); StrValue.PrintEx(printer); printer.Println();
        printer.Print("intValue = "); IntValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:46</p>
  /// </summary>
  public sealed class SimpleStruct : IPrintable, IEquatable<SimpleStruct>
  {
    //fields
    //public fields
    [NotNull] public string StrValue {get; private set;}
    public int IntValue {get; private set;}
    
    //private fields
    //primary constructor
    public SimpleStruct(
      [NotNull] string strValue,
      int intValue
    )
    {
      if (strValue == null) throw new ArgumentNullException("strValue");
      
      StrValue = strValue;
      IntValue = intValue;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string strValue, out int intValue)
    {
      strValue = StrValue;
      intValue = IntValue;
    }
    //statics
    
    public static CtxReadDelegate<SimpleStruct> Read = (ctx, reader) => 
    {
      var strValue = reader.ReadString();
      var intValue = reader.ReadInt();
      var _result = new SimpleStruct(strValue, intValue);
      return _result;
    };
    
    public static CtxWriteDelegate<SimpleStruct> Write = (ctx, writer, value) => 
    {
      writer.Write(value.StrValue);
      writer.Write(value.IntValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SimpleStruct) obj);
    }
    public bool Equals(SimpleStruct other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return StrValue == other.StrValue && IntValue == other.IntValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + StrValue.GetHashCode();
        hash = hash * 31 + IntValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SimpleStruct (");
      using (printer.IndentCookie()) {
        printer.Print("strValue = "); StrValue.PrintEx(printer); printer.Println();
        printer.Print("intValue = "); IntValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
