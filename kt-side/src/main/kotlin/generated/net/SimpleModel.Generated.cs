//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.12.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:244</p>
  /// </summary>
  public class SimpleModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<IlType[]> Types => _Types;
    [NotNull] public IViewableProperty<IlInstance[]> Instances => _Instances;
    
    //private fields
    [NotNull] private readonly RdProperty<IlType[]> _Types;
    [NotNull] private readonly RdProperty<IlInstance[]> _Instances;
    
    //primary constructor
    private SimpleModel(
      [NotNull] RdProperty<IlType[]> types,
      [NotNull] RdProperty<IlInstance[]> instances
    )
    {
      if (types == null) throw new ArgumentNullException("types");
      if (instances == null) throw new ArgumentNullException("instances");
      
      _Types = types;
      _Instances = instances;
      BindableChildren.Add(new KeyValuePair<string, object>("types", _Types));
      BindableChildren.Add(new KeyValuePair<string, object>("instances", _Instances));
    }
    //secondary constructor
    private SimpleModel (
    ) : this (
      new RdProperty<IlType[]>(ReadIlTypeArray, WriteIlTypeArray),
      new RdProperty<IlInstance[]>(ReadIlInstanceArray, WriteIlInstanceArray)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<IlType[]> ReadIlTypeArray = IlType.Read.Array();
    public static CtxReadDelegate<IlInstance[]> ReadIlInstanceArray = Polymorphic<IlInstance>.ReadAbstract(IlInstance_Unknown.Read).Array();
    
    public static  CtxWriteDelegate<IlType[]> WriteIlTypeArray = IlType.Write.Array();
    public static  CtxWriteDelegate<IlInstance[]> WriteIlInstanceArray = Polymorphic<IlInstance>.Write.Array();
    
    protected override long SerializationHash => -5080969073389914549L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(IlInstance.Read, IlInstance.Write);
      serializers.Register(IlMethod.Read, IlMethod.Write);
      serializers.Register(IlType.Read, IlType.Write);
      serializers.Register(IlInstance_Unknown.Read, IlInstance_Unknown.Write);
      
      serializers.RegisterToplevelOnce(typeof(DemoRoot), DemoRoot.RegisterDeclaredTypesSerializers);
    }
    
    public SimpleModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("SimpleModel"));
      this.BindTopLevel(lifetime, protocol, "SimpleModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("SimpleModel (");
      using (printer.IndentCookie()) {
        printer.Print("types = "); _Types.PrintEx(printer); printer.Println();
        printer.Print("instances = "); _Instances.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:245</p>
  /// </summary>
  public class IlInstance : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<string> Name => _Name;
    
    //private fields
    [NotNull] protected readonly RdProperty<string> _Name;
    
    //primary constructor
    protected IlInstance(
      [NotNull] RdProperty<string> name
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      _Name = name;
      _Name.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("name", _Name));
    }
    //secondary constructor
    public IlInstance (
    ) : this (
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<IlInstance> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var name = RdProperty<string>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString);
      var _result = new IlInstance(name).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<IlInstance> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<string>.Write(ctx, writer, value._Name);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("IlInstance (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); _Name.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  public sealed class IlInstance_Unknown : IlInstance
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    private IlInstance_Unknown(
      [NotNull] RdProperty<string> name
    ) : base (
      name
     ) 
    {
    }
    //secondary constructor
    public IlInstance_Unknown (
    ) : this (
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<IlInstance_Unknown> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var name = RdProperty<string>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString);
      var _result = new IlInstance_Unknown(name).WithId(_id);
      return _result;
    };
    
    public static new CtxWriteDelegate<IlInstance_Unknown> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<string>.Write(ctx, writer, value._Name);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("IlInstance_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); _Name.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:248</p>
  /// </summary>
  public sealed class IlMethod : IlInstance
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    private IlMethod(
      [NotNull] RdProperty<string> name
    ) : base (
      name
     ) 
    {
    }
    //secondary constructor
    public IlMethod (
    ) : this (
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<IlMethod> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var name = RdProperty<string>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString);
      var _result = new IlMethod(name).WithId(_id);
      return _result;
    };
    
    public static new CtxWriteDelegate<IlMethod> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<string>.Write(ctx, writer, value._Name);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("IlMethod (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); _Name.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: Model.kt:250</p>
  /// </summary>
  public sealed class IlType : IlInstance
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    private IlType(
      [NotNull] RdProperty<string> name
    ) : base (
      name
     ) 
    {
    }
    //secondary constructor
    public IlType (
    ) : this (
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<IlType> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var name = RdProperty<string>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString);
      var _result = new IlType(name).WithId(_id);
      return _result;
    };
    
    public static new CtxWriteDelegate<IlType> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<string>.Write(ctx, writer, value._Name);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("IlType (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); _Name.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
